public class AbstractClass {
    /*
    * 추상클래스
      abstract : 실체 간에 공통되는 특성을 추출한 것

      - 객체를 직접 생성할 수 있는 클래스를 "실체 클래스"라고 한다면, 이 클래스들의 공통적인 특성을 추출해서 선언한 클래스를 "추상 클래스" 라고 한다.
      - 추상 클래스와 실체 클래스는 [상속]의 관계를 가진다.
         > 추상 클래스가 부모, 실체 클래스가 자식
         > 실체 클래스는 추상 클래스의 모든 특성을 물려받고, 추가적인 특성을 가질 수 있다.
           # 특성 : 필드와 메소드를 뜻함
             ex) Bird.class, Insect.class, Fish.class 등의 실체 클래스에서 공통되는 필드와 메소드를 따로 선언한 Animal.class 를 만들 수 있는데, 이것이 바로 "추상 클래스"이다.

      * 추상 클래스의 용도
        1) 공통된 필드와 메소드의 이름을 통일할 목적
           - 실체 클래스를 설계하는 사람이 여럿일 경우, 실체 클래스마다 필드와 메소드가 제각기 다른 이름을 가질 수 있다.
             ex) 소유자의 이름을 저장하는 필드를 Telephone 클래스에서는 'owner', SmartPhone 클래스에서는 'user' 라고 할 수 있다.
                 전원을 켜는 메소드도 'turnOn()', 'powerOn()'으로 작성할 수 있다.
             > 위와 같이 데이터와 기능이 모두 동일함에도 불구하고 이름이 다르다 보니, 객체마다 사용 방법이 달라진다.
             
             > 위의 방법보다는 Phone이라는 추상 클래스에 소유자인 'owner' 필드와 'turnOn()' 메소드를 선언하고, Telephone과 SmartPhone은 Phone을 상속함으로써 필드와 메소드 이름을 통합할 수 있다.
             
        2) 실체 클래스를 작성할 때 시간 절약
           - 공통적인 필드와 메소드는 추상 클래스인 Phone에 모두 선언해두고, 다른 점만 실체 클래스에 선언하면 실체 클래스를 작성하는데 시간을 절약할 수 있다.
             ex) 자동차를 설계할 때에는 일반적인 타이어 규격에 맞추어서 작성해야 한다.
                 즉, 특정한 타이어만 사용할 수 있도록 자동차를 설계하지는 않는다는 것이다.
                 이는 일반적인 타이어 규격을 준수하는 타이어는 어떠한 것이든 부착할 수 있도록 하기 위해서이다.
                 여기서 '타이어 규격'은 타이어의 '추상 클래스'라고 볼 수 있고, 타이어 규격을 준수하는 '한국 타이어'와 '금호 타이어'는 추상 클래스를 상속하는 타이어의 실체 클래스라고 볼 수 있다.
    * */

    // 추상 클래스 선언
    public abstract class Test(){
        // 필드
        // 생성자
        // 메서드
    }
    /*
     1) 추상 클래스도 일반 클래스와 마찬가지로 필드, 생성자, 메소드 선언 가능
     2) new 연산자로 직접 생성자 호출할 수 X
        > 자식 객체가 생성될 때, super()를 호출해서 추상 클래스 객체를 생성하므로 추상 클래스도 생성자가 반드시 있어야 한다.

     - 추상 클래스는 실체 클래스의 공통되는 필드와 메소드를 추출해서 만들었기 때문에 객체를 직접 생성해서 사용할 수 없다.
       Animal animal = new Animal(); ----------- (X)

     - 추상 클래스는 새로운 실체 클래스를 만들기 위해 부모 클래스로만 사용된다. (추상 클래스 : extends 뒤에만 올 수 있는 클래스)
       Class Ant extends Animal{...} ----------- (O)

    * 추상 메소드와 재정의
      메소드의 선언만 통일하고, 실행 내용은 실체 클래스마다 달라야 하는 경우가 있다.
      ex) 모든 동물은 소리를 내기 때문에 Animal 추상 클래스에서 sound()라는 메소드를 정의했다고 가정

    * */
}
